/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */


import java.awt.Desktop;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author cascade
 */
public class BikeAccessoriesInformationSystem extends javax.swing.JFrame {

    /**
     * Creates new form BikeAccessoriesInformationSystem
     */
    ArrayList<Double> price;
    int count=1;
    int sno;//it is used while assigning symbol numbers to the newly added items.
    int importtimes;//to calculate the times of file imported
    boolean sorted;
    public BikeAccessoriesInformationSystem() {
        initComponents();
        price = new ArrayList<>();
    }
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        lblAccessoryId = new javax.swing.JLabel();
        txtAccessoryId = new javax.swing.JTextField();
        lblAccessoryName = new javax.swing.JLabel();
        txtAccessoryName = new javax.swing.JTextField();
        lblAccessoryCategory = new javax.swing.JLabel();
        txtAccessoryCategory = new javax.swing.JTextField();
        lblCompany = new javax.swing.JLabel();
        lblPriceRange = new javax.swing.JLabel();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton3 = new javax.swing.JRadioButton();
        btnAdd = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        lblPrice = new javax.swing.JLabel();
        txtPrice = new javax.swing.JTextField();
        jComboBox1 = new javax.swing.JComboBox<>();
        sliderRating = new javax.swing.JSlider();
        lblRating = new javax.swing.JLabel();
        txtSlider = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jLabel8 = new javax.swing.JLabel();
        jComboBox3 = new javax.swing.JComboBox<>();
        btnBrand = new javax.swing.JButton();
        txtSearchPrice = new javax.swing.JTextField();
        btnPrice = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnSort = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuOpen = new javax.swing.JMenuItem();
        jMenuExit = new javax.swing.JMenuItem();
        jHelpMenu = new javax.swing.JMenu();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));
        setForeground(new java.awt.Color(0, 0, 0));

        jPanel1.setBackground(new java.awt.Color(0, 0, 0));
        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel1.setBackground(new java.awt.Color(0, 0, 0));
        jLabel1.setFont(new java.awt.Font("Lucida Console", 1, 25)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText(" Bike Accessories Information System ");
        jLabel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jLabel1.setOpaque(true);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(96, 96, 96)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 45, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel2.setBackground(new java.awt.Color(0, 0, 0));
        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel2.setPreferredSize(new java.awt.Dimension(807, 290));

        lblAccessoryId.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        lblAccessoryId.setForeground(new java.awt.Color(255, 255, 255));
        lblAccessoryId.setText("Accessory Id");

        txtAccessoryId.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        txtAccessoryId.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtAccessoryIdKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtAccessoryIdKeyReleased(evt);
            }
        });

        lblAccessoryName.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        lblAccessoryName.setForeground(new java.awt.Color(255, 255, 255));
        lblAccessoryName.setText("Accessory Name");

        txtAccessoryName.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        txtAccessoryName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtAccessoryNameKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtAccessoryNameKeyReleased(evt);
            }
        });

        lblAccessoryCategory.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        lblAccessoryCategory.setForeground(new java.awt.Color(255, 255, 255));
        lblAccessoryCategory.setText("Accessory Category");

        txtAccessoryCategory.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        txtAccessoryCategory.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtAccessoryCategoryKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtAccessoryCategoryKeyReleased(evt);
            }
        });

        lblCompany.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        lblCompany.setForeground(new java.awt.Color(255, 255, 255));
        lblCompany.setText("Company / Brand");

        lblPriceRange.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        lblPriceRange.setForeground(new java.awt.Color(255, 255, 255));
        lblPriceRange.setText("Price Range");

        buttonGroup1.add(jRadioButton1);
        jRadioButton1.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jRadioButton1.setForeground(new java.awt.Color(255, 255, 255));
        jRadioButton1.setText("Low");
        jRadioButton1.setOpaque(false);

        buttonGroup1.add(jRadioButton3);
        jRadioButton3.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jRadioButton3.setForeground(new java.awt.Color(255, 255, 255));
        jRadioButton3.setText("High");
        jRadioButton3.setOpaque(false);

        btnAdd.setBackground(new java.awt.Color(0, 0, 0));
        btnAdd.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        btnAdd.setForeground(new java.awt.Color(255, 255, 255));
        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnClear.setBackground(new java.awt.Color(0, 0, 0));
        btnClear.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        btnClear.setForeground(new java.awt.Color(255, 255, 255));
        btnClear.setText("Clear");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        lblPrice.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        lblPrice.setForeground(new java.awt.Color(255, 255, 255));
        lblPrice.setText("Price");

        txtPrice.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        txtPrice.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtPriceKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtPriceKeyReleased(evt);
            }
        });

        jComboBox1.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-Select Item-", "Yamaha", "TVS", "Bajaj" }));

        sliderRating.setForeground(new java.awt.Color(255, 255, 255));
        sliderRating.setMajorTickSpacing(1);
        sliderRating.setMaximum(5);
        sliderRating.setPaintLabels(true);
        sliderRating.setPaintTicks(true);
        sliderRating.setValue(0);
        sliderRating.setOpaque(false);
        sliderRating.setRequestFocusEnabled(false);
        sliderRating.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderRatingStateChanged(evt);
            }
        });

        lblRating.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        lblRating.setForeground(new java.awt.Color(255, 255, 255));
        lblRating.setText("Rating");

        txtSlider.setEditable(false);
        txtSlider.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblAccessoryId, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblAccessoryCategory)
                    .addComponent(lblPriceRange, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(42, 42, 42)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jRadioButton3)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jRadioButton1)
                            .addComponent(txtAccessoryCategory, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtAccessoryId, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lblAccessoryName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblCompany, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblRating, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(78, 78, 78)
                        .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(88, 88, 88)
                        .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 47, Short.MAX_VALUE)))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(txtAccessoryName, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtPrice, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jComboBox1, javax.swing.GroupLayout.Alignment.LEADING, 0, 135, Short.MAX_VALUE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(sliderRating, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(19, 19, 19))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblAccessoryId)
                    .addComponent(txtAccessoryId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblAccessoryName)
                    .addComponent(txtAccessoryName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblAccessoryCategory)
                    .addComponent(txtAccessoryCategory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblCompany)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE, false)
                    .addComponent(lblPriceRange, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jRadioButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(lblRating)
                        .addComponent(sliderRating, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jRadioButton3)
                        .addGap(28, 28, 28)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20))
        );

        jPanel3.setBackground(new java.awt.Color(0, 0, 0));
        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel3.setPreferredSize(new java.awt.Dimension(807, 290));

        jTable2.setBackground(new java.awt.Color(0, 0, 0));
        jTable2.setForeground(new java.awt.Color(204, 204, 204));
        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Accessory Id", "Accessory Name", "Accessory Category", "Company/Brand", "Price Range", "Price", "Rating"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable2.setGridColor(new java.awt.Color(0, 0, 0));
        jTable2.setSelectionBackground(new java.awt.Color(255, 255, 255));
        jTable2.setSelectionForeground(new java.awt.Color(0, 0, 0));
        jScrollPane2.setViewportView(jTable2);
        if (jTable2.getColumnModel().getColumnCount() > 0) {
            jTable2.getColumnModel().getColumn(0).setResizable(false);
            jTable2.getColumnModel().getColumn(0).setPreferredWidth(30);
            jTable2.getColumnModel().getColumn(1).setResizable(false);
            jTable2.getColumnModel().getColumn(1).setPreferredWidth(65);
            jTable2.getColumnModel().getColumn(2).setResizable(false);
            jTable2.getColumnModel().getColumn(2).setPreferredWidth(70);
            jTable2.getColumnModel().getColumn(3).setResizable(false);
            jTable2.getColumnModel().getColumn(3).setPreferredWidth(70);
            jTable2.getColumnModel().getColumn(4).setPreferredWidth(25);
            jTable2.getColumnModel().getColumn(5).setResizable(false);
            jTable2.getColumnModel().getColumn(5).setPreferredWidth(20);
            jTable2.getColumnModel().getColumn(6).setResizable(false);
            jTable2.getColumnModel().getColumn(6).setPreferredWidth(12);
        }

        jLabel8.setBackground(new java.awt.Color(0, 0, 0));
        jLabel8.setFont(new java.awt.Font("Lucida Console", 1, 28)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("  Accessories Details");
        jLabel8.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jComboBox3.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jComboBox3.setForeground(new java.awt.Color(255, 255, 255));
        jComboBox3.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-Select Brand-", "Yamaha", "TVS", "Bajaj" }));

        btnBrand.setBackground(new java.awt.Color(0, 0, 0));
        btnBrand.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        btnBrand.setForeground(new java.awt.Color(255, 255, 255));
        btnBrand.setText("Search by Brand");
        btnBrand.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBrandActionPerformed(evt);
            }
        });

        txtSearchPrice.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        txtSearchPrice.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtSearchPriceKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSearchPriceKeyReleased(evt);
            }
        });

        btnPrice.setBackground(new java.awt.Color(0, 0, 0));
        btnPrice.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        btnPrice.setForeground(new java.awt.Color(255, 255, 255));
        btnPrice.setText("Search by Price");
        btnPrice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPriceActionPerformed(evt);
            }
        });

        btnDelete.setBackground(new java.awt.Color(0, 0, 0));
        btnDelete.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        btnDelete.setForeground(new java.awt.Color(255, 255, 255));
        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnSort.setBackground(new java.awt.Color(0, 0, 0));
        btnSort.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        btnSort.setForeground(new java.awt.Color(255, 255, 255));
        btnSort.setText("Sort by Price");
        btnSort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSortActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(33, 33, 33)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 393, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(btnBrand)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 128, Short.MAX_VALUE)
                                .addComponent(txtSearchPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(37, 37, 37)
                                .addComponent(btnPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnSort, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(147, 147, 147)
                .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(167, 167, 167))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBrand)
                    .addComponent(txtSearchPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnPrice))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSort, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(24, Short.MAX_VALUE))
        );

        jMenuBar1.setBorder(null);

        jMenu1.setText("File");

        jMenuOpen.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.ALT_MASK));
        jMenuOpen.setText("Open");
        jMenuOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuOpenActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuOpen);

        jMenuExit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.ALT_MASK));
        jMenuExit.setText("Exit");
        jMenuExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuExitActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuExit);

        jMenuBar1.add(jMenu1);

        jHelpMenu.setText("Help");
        jHelpMenu.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jHelpMenuMousePressed(evt);
            }
        });
        jMenuBar1.add(jHelpMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 758, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 758, Short.MAX_VALUE))
                .addGap(15, 15, 15))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 266, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 292, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        if (importtimes == 0) {
           JOptionPane.showMessageDialog(rootPane, "Please import the csv file first.", "Information", JOptionPane.INFORMATION_MESSAGE);
        } 
        else {
            try{
                String AccId = txtAccessoryId.getText();
                String AccName = txtAccessoryName.getText();
                String AccCate = txtAccessoryCategory.getText();
                String Price = txtPrice.getText();
                String Rating = txtSlider.getText();
                //Getting value from combo Box
                String Company = (String) jComboBox1.getSelectedItem();
                int rowCount = jTable2.getRowCount();

                String PriceRange = "";
                //Getting the value from the radiobutton
                if (jRadioButton1.isSelected()) {
                    PriceRange = PriceRange + jRadioButton1.getText();
                } 
                if (jRadioButton3.isSelected()) {
                    PriceRange = PriceRange + jRadioButton3.getText();
                }
                if (txtAccessoryId.getText().isEmpty() || txtAccessoryName.getText().isEmpty() || txtAccessoryCategory.getText().isEmpty() || txtPrice.getText().isEmpty() || jComboBox1.getSelectedIndex() == 0 || PriceRange.isEmpty()|| txtSlider.getText().isEmpty()){
                    JOptionPane.showMessageDialog(rootPane, "Please fill up all the fields.","ERROR", JOptionPane.ERROR_MESSAGE);
                }
                else if(AccId.isEmpty()){
                    JOptionPane.showMessageDialog(rootPane, "Please enter the Accessory ID.","ERROR", JOptionPane.ERROR_MESSAGE);
                }
                else if(AccName.isEmpty()){
                    JOptionPane.showMessageDialog(rootPane, "Please enter the Accessory Name","ERROR", JOptionPane.ERROR_MESSAGE);
                }
                else if(AccCate.isEmpty()){
                    JOptionPane.showMessageDialog(rootPane, "Please enter the Accessory Category","ERROR", JOptionPane.ERROR_MESSAGE);
                }
                else if(Price.isEmpty()){
                    JOptionPane.showMessageDialog(rootPane, "Please enter the Accessory Price","ERROR", JOptionPane.ERROR_MESSAGE);
                }
                else if(Rating.isEmpty()){
                    JOptionPane.showMessageDialog(rootPane, "Please Rate the accessory","ERROR", JOptionPane.ERROR_MESSAGE);
                }                
                else{
                    boolean repeat = false;

                    for (int count = 0; count < rowCount; count++){
                        String AId = (String) jTable2.getValueAt(count, 0);
                        //To check if the inserted  ID of Accessory already exists inside the table or not :
                        if (AId.equals(AccId )) {
                            repeat = true;
                            JOptionPane.showMessageDialog(rootPane, "The entered data already exists inside the table.");
                            break;
                        } 
                   }
                    if(repeat == false){
                        DefaultTableModel model = (DefaultTableModel) jTable2.getModel();
                        model.addRow(new Object[]{txtAccessoryId.getText(),txtAccessoryName.getText(),txtAccessoryCategory.getText(),
                        jComboBox1.getSelectedItem(),jTable2.getValueAt(count, 4),txtPrice.getText(),txtSlider.getText()});
                        JOptionPane.showMessageDialog(rootPane,"Values successfully added.","SUCCESSFUL",JOptionPane.INFORMATION_MESSAGE);
                        txtAccessoryId.setText("");
                        txtAccessoryName.setText("");
                        txtAccessoryCategory.setText("");
                        txtPrice.setText("");
                        jComboBox1.setSelectedIndex(0);
                        buttonGroup1.clearSelection();
                        sliderRating.setValue(0);
                        txtSlider.setText("");
                    }
                }
            }
            catch(Exception e){
                JOptionPane.showMessageDialog(rootPane,"enter valid value","Error !",JOptionPane.WARNING_MESSAGE);
            }
        }
    
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        txtAccessoryId.setText("");
        txtAccessoryName.setText("");
        txtAccessoryCategory.setText("");
        txtPrice.setText("");
        jComboBox1.setSelectedIndex(0);
        buttonGroup1.clearSelection();
        sliderRating.setValue(0);
        txtSlider.setText("");
        //txtSearchPrice.setText("");
       // jComboBox3.setSelectedIndex(0);
    }//GEN-LAST:event_btnClearActionPerformed

    private void sliderRatingStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderRatingStateChanged
        txtSlider.setText(Integer.toString(sliderRating.getValue()));
    }//GEN-LAST:event_sliderRatingStateChanged

    private void btnPriceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPriceActionPerformed
        String search = txtSearchPrice.getText();
        if (importtimes == 0) {
           JOptionPane.showMessageDialog(rootPane, "Please import the csv file first.", "Information", JOptionPane.INFORMATION_MESSAGE);
        } 
        else if(search.equals(""))
        {
            JOptionPane.showMessageDialog(rootPane, "Please enter the price.", "ERROR MESSAGE", JOptionPane.ERROR_MESSAGE);
        }
        else
        {  
            sort();
            double key = Double.parseDouble(search);
            int low = 0;
            int high = price.size()-1;
            double found = binarySearch( low, high, key);
            if(found == -1.0) 
            {
                JOptionPane.showMessageDialog(rootPane, "Search not found","ERROR MESSAGE", JOptionPane.ERROR_MESSAGE);
            }
            else 
            {
                for(int i = 0 ;i < jTable2.getRowCount(); i++)
                {
                    if(found == Double.parseDouble((String)jTable2.getValueAt(i, 5))) 
                    {
                        JOptionPane.showMessageDialog(rootPane, "Id: " + (String)jTable2.getValueAt(i, 0) + "\n"
                        + "Name: " + (String)jTable2.getValueAt(i, 1) + "\n"
                        + "Category: " + (String)jTable2.getValueAt(i, 2) + "\n"
                        + "Brand: " + (String)jTable2.getValueAt(i, 3) + "\n"
                        + "Price Range: " + (String)jTable2.getValueAt(i, 4) + "\n"
                        + "Price: " + (String)jTable2.getValueAt(i, 5) + "\n"
                        + "Rating: " + (String)jTable2.getValueAt(i, 6),
                        "ACCESSORY INFORMATION", JOptionPane.INFORMATION_MESSAGE);
                        break;
                    }
                }
            }
        }
    }//GEN-LAST:event_btnPriceActionPerformed

    private void btnBrandActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBrandActionPerformed
        try {
            //get table first
            DefaultTableModel model = (DefaultTableModel) jTable2.getModel();

            //get the number of rows from the table
            String[] availableAccessory;
            availableAccessory = new String[model.getRowCount()];
            int rows = model.getRowCount();
            //int columns = model.getColumnCount();            
            String brand = jComboBox3.getSelectedItem().toString();

            int count = 0;
            for (int i = 0; i < rows; i++) {
                String Brand = jTable2.getValueAt(i, 3).toString();
                if (Brand.equals(brand)) {
                    String accessoryName =(String) jTable2.getValueAt(i,0)+". "+(String) jTable2.getValueAt(i,1);
                    availableAccessory[i] = accessoryName;
                    count++;
                }
            }
            if(jComboBox3.getSelectedIndex() == 0){
                JOptionPane.showMessageDialog(rootPane,"Please select the brand name.","ERROR MESSAGE",JOptionPane.ERROR_MESSAGE);
            }
            else if(count!=0)
            {    
                JList list = new JList(availableAccessory); 
                JOptionPane.showMessageDialog(rootPane,list," Available Accessories"+ " of " + brand + " are: " + count,JOptionPane.INFORMATION_MESSAGE);
            }
            else
            {
                JOptionPane.showMessageDialog(rootPane,"Accessories not found!!","Not found",JOptionPane.INFORMATION_MESSAGE);
            }

        } 
        catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, "Error while searching", "Error", JOptionPane.ERROR_MESSAGE);
            System.out.println(e);
        }
    }//GEN-LAST:event_btnBrandActionPerformed

    private void jMenuOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuOpenActionPerformed
        String filePath = "src/table.txt";//get the filePath
        File file = new File(filePath);//the filepath is of filetype

        if (this.importtimes > 0) {
            JOptionPane.showMessageDialog(rootPane, "The file has already been imported", "Information", JOptionPane.INFORMATION_MESSAGE);
        }
        
        //if the file is not imported then do 
        if (this.importtimes == 0) {
            try {

                //implement Buffered Reader to read from the file
                BufferedReader br = new BufferedReader(new FileReader(file));
                String firstLine = br.readLine().trim();//Firstline canceled

                //make a model of tables
                DefaultTableModel model = (DefaultTableModel) jTable2.getModel();

                /*make an object type of single dimensional array
                 add the file contents to array.*/
                Object[] tableLines = br.lines().toArray();

                //for loop to add the contents to table
                for (int i = 0; i < tableLines.length; i++) {
                    String line = tableLines[i].toString().trim();
                    String[] dataRow = line.split(",");
                    model.addRow(dataRow);

                    //since the last sno should be different while adding so we do this
                    String lastsno = (String) model.getValueAt(jTable2.getModel().getRowCount()-1, 0);//get last sno of the file that we import
                    this.sno = Integer.parseInt(lastsno);
                }
                this.importtimes = 1;
                //display the sucessful message to the user.
                JOptionPane.showMessageDialog(rootPane, "File is imported sucessfully", "SUCESS", JOptionPane.INFORMATION_MESSAGE);

            } 
            catch (Exception e) 
            {
                JOptionPane.showMessageDialog(rootPane, e, "ERROR", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_jMenuOpenActionPerformed

    private void jMenuExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuExitActionPerformed
        int value = JOptionPane.showConfirmDialog(rootPane,"Would You Like to exit?", "Exit", JOptionPane.YES_NO_OPTION);

        //if value is equal to exit option
        if (value == JOptionPane.YES_OPTION) 
        {
            System.exit(0);//system is closed
        }
    }//GEN-LAST:event_jMenuExitActionPerformed

    private void jHelpMenuMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jHelpMenuMousePressed
        if (Desktop.isDesktopSupported()) {
            try
            {
                int value = JOptionPane.showConfirmDialog(rootPane,"Would You Like to open users help guide?", "CONFIRMATION", JOptionPane.YES_NO_OPTION);
                
                if (value == JOptionPane.YES_OPTION) {
                    File myfile = new File("src\\Help.pdf");
                    Desktop.getDesktop().open(myfile);
                }
            }
            catch(IOException e)
            {
                JOptionPane.showMessageDialog(rootPane, "Please check the file.", "File not found.", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_jHelpMenuMousePressed

    private void txtAccessoryIdKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtAccessoryIdKeyPressed
        char c = evt.getKeyChar();
        if(!(Character.isDigit(c))) 
        {
            if(evt.getKeyCode() == 8)
            { 
                txtAccessoryId.setEditable(true);
            }
            else 
            {
                txtAccessoryId.setEditable(false);
            }
        }
    }//GEN-LAST:event_txtAccessoryIdKeyPressed

    private void txtAccessoryNameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtAccessoryNameKeyPressed
        if(evt.getKeyCode() == 32){
            if(txtAccessoryName.getText().length()>0){
                txtAccessoryName.setEditable(true);
            }else{
                txtAccessoryName.setEditable(false);
            }
        }
    }//GEN-LAST:event_txtAccessoryNameKeyPressed

    private void txtAccessoryCategoryKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtAccessoryCategoryKeyPressed
        if(evt.getKeyCode() == 32){
            if(txtAccessoryCategory.getText().length()>0){
                txtAccessoryCategory.setEditable(true);
            }else{
                txtAccessoryCategory.setEditable(false);
            }
        }
    }//GEN-LAST:event_txtAccessoryCategoryKeyPressed

    private void txtPriceKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPriceKeyPressed
        char c = evt.getKeyChar();
        if(!(Character.isDigit(c))) 
        {
            if(evt.getKeyCode() == 8)
            { 
                txtPrice.setEditable(true);
            }
            else 
            {
                txtPrice.setEditable(false);
            }
        }
    }//GEN-LAST:event_txtPriceKeyPressed

    private void txtPriceKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPriceKeyReleased
        txtPrice.setEditable(true);
    }//GEN-LAST:event_txtPriceKeyReleased

    private void txtSearchPriceKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchPriceKeyPressed
        char c = evt.getKeyChar();
        if(!(Character.isDigit(c))) 
        {
            if(evt.getKeyCode() == 8)
            { 
                txtSearchPrice.setEditable(true);
            }
            else 
            {
                txtSearchPrice.setEditable(false);
            }
        } 
    }//GEN-LAST:event_txtSearchPriceKeyPressed

    private void txtSearchPriceKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchPriceKeyReleased
        txtSearchPrice.setEditable(true);
    }//GEN-LAST:event_txtSearchPriceKeyReleased

    private void txtAccessoryIdKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtAccessoryIdKeyReleased
        txtAccessoryId.setEditable(true);
    }//GEN-LAST:event_txtAccessoryIdKeyReleased

    private void txtAccessoryNameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtAccessoryNameKeyReleased
        txtAccessoryName.setEditable(true);
    }//GEN-LAST:event_txtAccessoryNameKeyReleased

    private void txtAccessoryCategoryKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtAccessoryCategoryKeyReleased
        txtAccessoryCategory.setEditable(true);
    }//GEN-LAST:event_txtAccessoryCategoryKeyReleased

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        DefaultTableModel model = (DefaultTableModel) jTable2.getModel();
        try {
            //To conform if the user wants to delete the selected row
            int selectedRow = jTable2.getSelectedRow();
            int response = JOptionPane.showConfirmDialog(rootPane, "Are you sure you want to delete?", "Confirmation", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (response == JOptionPane.YES_OPTION) {
                model.removeRow(selectedRow);
            }
        } 
        catch (Exception ex) {//To remind the user to select the row before deleting
            JOptionPane.showMessageDialog(rootPane, "Select the data you want to delete.", "Warning", JOptionPane.WARNING_MESSAGE);
        }
        
         
        // To delete the selected data inside the table:
       /* DefaultTableModel model = (DefaultTableModel) jTable2.getModel();
        
        try {
            //To conform if the user wants to delete the selected row
            int selectedRow = jTable2.getSelectedRow();
            int response = JOptionPane.showConfirmDialog(null, "Are you sure you want to delete?", "Confirm", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            
            if (response == JOptionPane.YES_OPTION) {
                model.removeRow(selectedRow);
            }
            
        } catch (Exception ex) {//To remind the user to select the row before deleting
            JOptionPane.showMessageDialog(null, "Select the data you want to delete.");
        }*/
        
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnSortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSortActionPerformed
        try {
            //if sorted is true then display the user the appropriate dialog box
            if (sorted == true) {
                JOptionPane.showMessageDialog(rootPane, "The table is already sorted", "Information", JOptionPane.INFORMATION_MESSAGE);
            } 
            //otherwise do this
            else {
                //get the table model
                DefaultTableModel model = (DefaultTableModel) jTable2.getModel();

                ArrayList tabcontents = new ArrayList();
                int rows = model.getRowCount();
                int cols = model.getColumnCount();

                for (int i = 0; i < rows; i++) {
                    for (int j = 0; j < cols; j++) 
                    {
                        tabcontents.add(model.getValueAt(i, j));
                    }
                }

                ArrayList<Integer> price = new ArrayList();

                for (int i = 5; i < tabcontents.size(); i = i + 7) {
                    if (tabcontents.get(i) instanceof String) 
                    {
                        Integer p = Integer.valueOf((String) tabcontents.get(i));
                        price.add(p);
                    }
                    if (tabcontents.get(i) instanceof Integer) 
                    {
                        Integer p = (Integer) tabcontents.get(i);
                        price.add(p);
                    }
                }

                ArrayList<String> sn = new ArrayList();

                for (int i = 0; i < tabcontents.size(); i = i + 7) 
                {
                    String symbolno = String.valueOf(tabcontents.get(i));
                    sn.add(symbolno);
                }

                
                int n = price.size();
                
                for (int i = 0; i < n-1; i++){ // One by one move boundary of unsorted subarray
                int min_idx = i; // Find the minimum element in unsorted array
                    for (int j = i+1; j < n; j++){
                 if ( price.get(j) < price.get(min_idx)){
                        min_idx = j;
                 }
                }
                        int temp = price.get(min_idx);
                        String temp1 = sn.get(min_idx);
                        price.set(min_idx, price.get(i));
                        price.set(i, temp);
                        sn.set(min_idx, sn.get(i));
                        sn.set(i, temp1);
                }
                
                
                Object[][] array = new Object[rows][cols];
                for (int i = 0; i < rows; i++)
                {
                    for (int j = 0; j < cols; j++) 
                    {
                        array[i][j] = model.getValueAt(i, j);
                    }
                }

                 
                model.setNumRows(0);

                //now sort the table 
                for (int i = 0; i < price.size(); i++) {
                    for (int j = 0; j < sn.size(); j++) {
                        int p = Integer.parseInt(array[j][5].toString());
                        int q = Integer.parseInt(array[j][0].toString());

                        if (price.get(i) == p) 
                        {
                            if (sn.get(i).equals(Integer.toString(q))) 
                            {
                                model.addRow(new Object[]{array[j][0], array[j][1], array[j][2], array[j][3], array[j][4], array[j][5], array[j][6]});
                                break;
                            }
                        }
                    }
                }

                this.sorted = true;
            }
        } 
        catch (NumberFormatException e) 
        {
            JOptionPane.showMessageDialog(rootPane, "The table contains the vlaue with alphabets in price section", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnSortActionPerformed
    public void sort()
    {
        DefaultTableModel model = (DefaultTableModel) jTable2.getModel();
        int k = 0;
        double temp=0;
        price.clear();
        do
        {
           String s = (String)model.getValueAt(k,5);
           if(s!=null && s.length()!= 0)
            {
                price.add(Double.parseDouble(s));
            }
           
           k++;
        }
        while(k < model.getRowCount());
        
        for(int i=0; i<(price.size()); i++)
        {
           for(int j =1; j<(price.size()); j++)
           {
               if(price.get(j) < price.get(j-1))
               {
                    temp = price.get(j);
                    price.set(j, price.get(j-1));
                    price.set(j-1, temp);
               }
            } 
        } 
    }
    
    public Double binarySearch(int low, int high, double key)
    {
        if(low <= high)
        {
            int mid = low+(high-low)/2;
            if(this.price.get(mid) == key)
            {
                return this.price.get(mid);
            }
        
            else if(this.price.get(mid) > key)
            {
                return binarySearch(low,mid-1,key);
            }
            else if(this.price.get(mid) < key)
            {
                return binarySearch(mid+1,high,key);
            }
            
        }
        return -1.0;
    }
/*public class SelectionSort{ 
    public void asc(int rate[]){
        int num = rate.length;
        
        for (int i = 0; i < num-1; i++){ // One by one move boundary of unsorted subarray
        int min_idx = i; // Find the minimum element in unsorted array
        for (int j = i+1; j < num; j++){
            if (rate[j] < rate[min_idx]){
                min_idx = j;
        }
        }
        int temp = rate[min_idx]; // Swap the found minimum element with the first element 
        rate[min_idx] = rate[i]; 
        rate[i] = temp; 
        }
    }

    public void printArray(int rate[]) { 
        int n = rate.length; 
        for (int G=0; G<n-1; G++) 
            System.out.print(rate[G]+" "); 
    }
}*/
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BikeAccessoriesInformationSystem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BikeAccessoriesInformationSystem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BikeAccessoriesInformationSystem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BikeAccessoriesInformationSystem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BikeAccessoriesInformationSystem().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnBrand;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnPrice;
    private javax.swing.JButton btnSort;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox3;
    private javax.swing.JMenu jHelpMenu;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuExit;
    private javax.swing.JMenuItem jMenuOpen;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JLabel lblAccessoryCategory;
    private javax.swing.JLabel lblAccessoryId;
    private javax.swing.JLabel lblAccessoryName;
    private javax.swing.JLabel lblCompany;
    private javax.swing.JLabel lblPrice;
    private javax.swing.JLabel lblPriceRange;
    private javax.swing.JLabel lblRating;
    private javax.swing.JSlider sliderRating;
    private javax.swing.JTextField txtAccessoryCategory;
    private javax.swing.JTextField txtAccessoryId;
    private javax.swing.JTextField txtAccessoryName;
    private javax.swing.JTextField txtPrice;
    private javax.swing.JTextField txtSearchPrice;
    private javax.swing.JTextField txtSlider;
    // End of variables declaration//GEN-END:variables
}
